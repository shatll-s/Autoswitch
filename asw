#!/bin/bash
#BATCH_CFG="/sobaka/cfg/batch.cfg"
#AUTOSWITCH_CFG="/sobaka/cfg/autoswitch.cfg"
BATCH_CFG="/tmp/batch.cfg"
AUTOSWITCH_CFG="/tmp/autoswitch.cfg"
cp /Autoswitch/autoswitch $AUTOSWITCH_CFG
cp /Autoswitch/batch.cfg $BATCH_CFG

. colors

provider="Nicehash NEW"
hyst="5"

#benchmark позже заливать из файла
benchmark='
{
	"DAGGERHASHIMOTO": 362,
	"X16R": 115,
	"BEAMV2": 222
}'

#DAGGERHASHIMOTO	BTC/TH/day
#X16R				BTC/GH/day
#BEAMV2				BTC/kSol/day
#GrinCuckaroo29		BTC/kG/day

algo_dividers='
{
	"DAGGERHASHIMOTO": 1000,
	"X16R": 1000,
	"BEAMV2": 1000000000
}'

function set_active () {
	local json=`echo $1 | jq 'del (.autoswitch[].active)'`
	local best_algo="$2"
	for (( i=0; i < `echo $as_cfg | jq '.autoswitch | length'`; i++ )); do
		if [[ `echo $as_cfg | jq -r ".autoswitch[$i].algo"` == $best_algo ]]; then
			local miner=`echo $as_cfg | jq -r ".autoswitch[$i].miner"`
			local batch=`echo $as_cfg | jq -r ".autoswitch[$i].batch"`
			sed -ei "s%miner1=.*$%miner1=\"$miner\"%; s%batch1=.*$%batch1=\"$batch\"%" $BATCH_CFG
			#sed -i "s%batch1=.*$%batch1=\"$batch\"%" $BATCH_CFG
			json=`jq ".autoswitch[$i] += {\"active\": 1}" <<< "$json"`
			echo "$json" > $AUTOSWITCH_CFG
		break
		fi
	done	
}

function get_new_nicehash_stats () {
	local api="https://api2.nicehash.com/main/api/v2/public/simplemultialgo/info/"
	nh_stats=$(echo `curl -s $api` | jq '.miningAlgorithms[]')
	for (( i=0; i < ${#algo[@]}; i++ )); do
		divider[i]=`echo $algo_dividers | jq ".${algo[$i]}"`
		price[$i]=`echo $nh_stats | jq -r ". | select (.algorithm == \"${algo[$i]}\") | .paying"`
		profit_btc[$i]=`echo "scale=10; x=${price[$i]} * ${hr[$i]} / ${divider[$i]}; if(x<1) print 0; x" | bc -l`
		if [[ -z $max_profit || `echo "if (${profit_btc[$i]} > $max_profit) print 1" | bc -l` -eq 1 ]]; then
			max_profit=${profit_btc[$i]}
			max_profit_i=$i
		fi
		profit_usd[$i]=`echo "scale=2; x=${profit_btc[$i]} * $btcusd / 1; if(x<1) print 0; x" | bc -l`
		string="${CYAN}${algo[$i]}${WHITE}, price ${price[i]}, hr ${hr[$i]}, ${profit_btc[$i]} BTC/day, ${GREEN}${profit_usd[$i]} USD/day${WHITE}"
		echo -e "$string"
	done	
}

function get_old_nicehash_stats () {
	local api="https://api.nicehash.com/api?method=simplemultialgo.info"
	nh_algos='
	{
		"SCRYPT" : 0,
		"SHA256" : 1,
		"SCRYPTNF" : 2,
		"X11" : 3,
		"X13" : 4,
		"KECCAK" : 5,
		"X15" : 6,
		"NIST5" : 7,
		"NEOSCRYPT" : 8,
		"LYRA2RE" : 9,
		"WHIRLPOOLX" : 10,
		"QUBIT" : 11,
		"QUARK" : 12,
		"AXIOM" : 13,
		"LYRA2REV2" : 14,
		"SCRYPTJANENF16" : 15,
		"BLAKE256R8" : 16,
		"BLAKE256R14" : 17,
		"BLAKE256R8VNL" : 18,
		"HODL" : 19,
		"DAGGERHASHIMOTO" : 20,
		"DECRED" : 21,
		"CRYPTONIGHT" : 22,
		"LBRY" : 23,
		"EQUIHASH" : 24,
		"PASCAL" : 25,
		"X11GOST" : 26,
		"SIA" : 27,
		"BLAKE2S" : 28,
		"SKUNK" : 29,
		"CRYPTONIGHTV7" : 30,
		"CRYPTONIGHTHEAVY" : 31,
		"LYRA2Z" : 32,
		"X16R" : 33,
		"CRYPTONIGHTV8" : 34,
		"SHA256ASICBOOST" : 35,
		"ZHASH" : 36,
		"BEAM" : 37,
		"GRINCUCKAROO29" : 38,
		"GRINCUCKATOO31" : 39,
		"LYRA2REV3" : 40,
		"MTP" : 41,
		"CRYPTONIGHTR" : 42,
		"CUCKOOCYCLE" : 43
	}'
	nh_stats=$(echo `curl -s $api` | jq '.result.simplemultialgo[]')
	for (( i=0; i < ${#algo[@]}; i++ )); do
		if [[ `echo $nh_algos | jq ".${algo[$i]}"` != null ]]; then
			key[$i]=`echo $nh_algos | jq ".${algo[$i]}"`
			divider[i]=`echo $algo_dividers | jq ".${algo[$i]}"`
			price[$i]=`echo $nh_stats | jq -r ". | select (.algo == ${key[$i]}) | .paying"`
			profit_btc[$i]=`echo "scale=10; x=${price[$i]} * ${hr[$i]} / ${divider[$i]}; if(x<1) print 0; x" | bc -l`
			if [[ -z $max_profit || `echo "if (${profit_btc[$i]} > $max_profit) print 1" | bc -l` -eq 1 ]]; then
				max_profit=${profit_btc[$i]}
				max_profit_i=$i
			fi
			profit_usd[$i]=`echo "scale=2; ${profit_btc[$i]} * $btcusd / 1" | bc -l`
			string="${CYAN}${algo[$i]}${WHITE} (${key[$i]}), price ${price[i]}, hr ${hr[$i]}, ${profit_btc[$i]} BTC/day, ${GREEN}${profit_usd[$i]} USD/day${WHITE}"
		else
			string="${CYAN}${algo[$i]}${WHITE} is not supported by current state provider"
		fi
		echo -e "$string"
	done 
}

algo=(`echo $benchmark | jq -r 'keys_unsorted | .[]'`)
hr=(`echo $benchmark | jq -r '.[]'`)

echo "$(date -R) Autoswitch for NiceHash started"
bitaps_api=`curl -s https://api.bitaps.com/market/v1/ticker/btcusd`
btcusd=`echo $bitaps_api | jq '.data.last'`
[[ -z $btcusd ]] && echo "BitAPS API is not available, using default BTC price " && btcusd=12000
echo -e "State provider: ${CYAN}$provider${WHITE}, BTC/USD $btcusd"

#echo $nh_stats > /tmp/nh_stats

case $provider in
	"Nicehash OLD")
		get_old_nicehash_stats
	;;
	"Nicehash NEW"|*)
		get_new_nicehash_stats
	;;
esac
echo "--"
if [[ ! -z $max_profit_i ]]; then
	best_algo=${algo[$max_profit_i]}
	string="${CYAN}${best_algo}${WHITE} is the best algo now, with ${profit_btc[$max_profit_i]} BTC/day, ${GREEN}${profit_usd[$max_profit_i]} USD/day${WHITE}"
	echo -e "$string"
	$LINE
	#. $BATCH_CFG
	
	as_cfg=`cat $AUTOSWITCH_CFG`
	active_algo=`echo $as_cfg | jq -r ".autoswitch[] | select (.active == 1) | .algo"`
	
	if [[ -z $active_algo ]]; then
		echo -e "${GREEN}There is no active algo, set ${CYAN}${algo[$max_profit_i]}${WHITE}"	
		set_active "$as_cfg" "$best_algo"
		
	elif [[ $active_algo == ${algo[$max_profit_i]} ]]; then
		echo -e "${CYAN}${active_algo} ${GREEN}is already set. Nothing to do${WHITE}"
	else	
		for (( i=0; i < ${#algo[@]}; i++ )); do
			[[ ${algo[$i]} == $active_algo ]] && active_profit=${profit_btc[$i]} && break
		done
		
		delta=`echo "scale=2;($max_profit/$active_profit - 1)*100" | bc -l`
		echo -en "${CYAN}${algo[$max_profit_i]}${GREEN} is $delta% more profitable then ${CYAN}$active_algo${GREEN}"
		if [[ `echo "if ($delta > $hyst) print 1" | bc -l` -eq 1 ]]; then
			echo -e ", switching to it${WHITE}"
			set_active "$as_cfg" "$best_algo"
		else
			echo -e ", but hysteresis is $hyst, nothing to do${WHITE}"
		fi
	fi
else
	echo "Error occured while getting max profit"
fi